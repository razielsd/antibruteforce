swagger: "2.0"
info:
  description: "Antibruteforce scheme."
  version: "1.0.0"
  title: "Swagger Antibruteforce"
schemes:
  - "http"
paths:
  /api/user/allow:
    post:
      summary: "Check allow user login"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "login"
          description: "User login"
          required: true
        - in: "formData"
          type: "string"
          name: "pwd"
          description: "User password"
          required: true
        - in: "formData"
          type: "string"
          name: "ip"
          description: "User IP"
          required: true
      responses:
        "200":
          description: "Allow user login state"
          schema:
            $ref: "#/definitions/AllowResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/whitelist:
    get:
      summary: "Get whitelist of ip/subnet"
      responses:
        "200":
          description: "List of ip/subnet"
          schema:
            $ref: "#/definitions/IPListResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/whitelist/add:
    post:
      summary: "Add IP to whitelist"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "ip"
          description: "IP or subnet"
          required: true
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/whitelist/remove:
    post:
      summary: "Remove IP from whitelist"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "ip"
          description: "IP or subnet"
          required: true
      responses:
        "200":
          description: "Successfully removed"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /api/blacklist:
    get:
      summary: "Get blacklist of ip/subnet"
      responses:
        "200":
          description: "List of ip/subnet"
          schema:
            $ref: "#/definitions/IPListResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/blacklist/add:
    post:
      summary: "Add IP to blacklist"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "ip"
          description: "IP or subnet"
          required: true
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/blacklist/remove:
    post:
      summary: "Remove IP from blacklist"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "ip"
          description: "IP or subnet"
          required: true
      responses:
        "200":
          description: "Successfully removed"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/bucket/drop/login:
    post:
      summary: "Drop bucket by login"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "key"
          description: "User login"
          required: true
      responses:
        "200":
          description: "Successfully dropped"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/bucket/drop/pwd:
    post:
      summary: "Drop bucket by password"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "key"
          description: "User password"
          required: true
      responses:
        "200":
          description: "Successfully dropped"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/bucket/drop/ip:
    post:
      summary: "Drop bucket by IP"
      description: ""
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          type: "string"
          name: "key"
          description: "User IP"
          required: true
      responses:
        "200":
          description: "Successfully dropped"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Bad parameters"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /health/liveness:
    get:
      summary: "k8s liveness probe"
      responses:
        "200":
          description: "Service is alive"
          schema:
            $ref: "#/definitions/OKResponse"
  /health/readiness:
    get:
      summary: "k8s readiness probe"
      responses:
        "200":
          description: "Service can accept requests"
          schema:
            $ref: "#/definitions/OKResponse"

definitions:
  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
      error:
        type: "string"
  AllowResponse:
    type: "object"
    properties:
      result:
        type: "object"
        properties:
          can-auth:
            type: boolean
          login-check:
            type: boolean
          pwd-check:
            type: boolean
          ip-check:
            type: boolean
          whitelist-check:
            type: boolean
          blacklist-check:
            type: boolean
      code:
        type: integer
  IPListResponse:
    type: "object"
    properties:
      result:
        type: "array"
        items:
          type: "string"
        example: ["192.168.1.55", "10.10.1.0/24"]
      code:
        type: integer
  OKResponse:
    type: "object"
    properties:
      result:
        type: "object"
        properties:
          status:
            type: "string"
      code:
        type: integer